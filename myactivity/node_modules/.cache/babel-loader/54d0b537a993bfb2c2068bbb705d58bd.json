{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\taghos\\\\source\\\\experiments\\\\MyActivity\\\\myactivity\\\\src\\\\App.js\";\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nfunction App() {\n  const getActivityData = async () => {\n    try {\n      var url = window.location.href;\n      var access_token;\n\n      if (url !== \"http://localhost:3000/\") {\n        var access_token = url.split(\"#\")[1].split(\"=\")[1].split(\"&\")[0];\n        var userId = url.split(\"#\")[1].split(\"=\")[2].split(\"&\")[0];\n        let getActivityDataUrl = 'https://api.fitbit.com/1/user/-/activities/steps/date/2020-07-20/today.json';\n        const options = {\n          headers: {\n            \"Authorization\": [\"Bearer \" + access_token]\n          }\n        };\n        var response = await fetch(getActivityDataUrl, options);\n\n        if (response.status >= 300) {\n          throw new Error(response.statusText);\n        }\n\n        var data = await response.json();\n        var steps = data['activities-steps'];\n        steps.forEach(element => {\n          console.log(element.dateTime + \" : \" + element.value);\n        });\n      }\n    } catch (error) {\n      console.log(\"Error in getting Activity data: \" + error.message);\n    }\n  };\n\n  let activityStartTime, activityEndTime;\n\n  const fetchData = async () => {\n    try {\n      let s = document.getElementById(\"startTime\");\n      let startHour = parseInt(s.options[s.selectedIndex].value) + 7; // Convert to UTC time\n\n      let e = document.getElementById(\"endTime\");\n      let endHour = parseInt(e.options[e.selectedIndex].value) + 7;\n      var startTime, endTime;\n\n      if (startHour >= 24 && endHour >= 24) {\n        var startDateFull = new Date();\n        startDateFull.setDate(new Date().getDate() + 1);\n        var datePrefix = endDateFull.toISOString().substring(0, 11);\n        startTime = datePrefix + formatTimeOver24(startHour) + ':00:00.0000000';\n        endTime = datePrefix + formatTimeOver24(endHour) + ':00:00.0000000';\n      } else if (endHour >= 24) {\n        var datePrefix = new Date().toISOString().substring(0, 11);\n        startTime = datePrefix + formatTime(startHour) + ':00:00.0000000';\n        var endDateFull = new Date();\n        endDateFull.setDate(new Date().getDate() + 1);\n        var endDatePrefix = endDateFull.toISOString().substring(0, 11);\n\n        if (endHour - 24 <= 9) {\n          endHour = \"0\" + (endHour - 24).toString();\n        }\n\n        endTime = endDatePrefix + endHour + ':00:00.0000000';\n      } else {\n        var datePrefix = new Date().toISOString().substring(0, 11);\n        startTime = datePrefix + formatTime(startHour) + ':00:00.0000000';\n        endTime = datePrefix + formatTime(endHour) + ':00:00.0000000';\n      }\n\n      let getCalendarEventsUrl = \"https://graph.microsoft.com/v1.0/me/calendarView?startDateTime=\" + startTime + \"&endDateTime=\" + endTime + \"&$select=subject,start,end,isAllDay\";\n      const options = {\n        headers: {\n          \"Authorization\": await getAuthorizationToken()\n        }\n      }; // Fetching user's calendar data for today\n\n      var response = await fetch(getCalendarEventsUrl, options);\n\n      if (response.status >= 300) {\n        throw new Error(response.statusText);\n      }\n\n      var body = await response.json();\n      var events = body.value;\n      let startTimes = [];\n      let endTimes = [];\n      let i = 0;\n      console.log(\"Scanning your calendar\");\n      events.forEach(element => {\n        if (!element.isAllDay) {\n          startTimes[i] = new Date(element.start.dateTime);\n          endTimes[i] = new Date(element.end.dateTime); // console.log(element.subject + \" : \" + startTimes[i] + \" to \" + endTimes[i]);\n\n          i++;\n        }\n      });\n      startTimes[i] = new Date(endTime);\n      startTimes.sort((a, b) => a - b);\n      endTimes.sort((a, b) => a - b);\n      let maxDiff = new Date(startTimes[0]) - new Date(startTime);\n      let j,\n          interval = 0,\n          hourDiff = 0;\n\n      for (j = 1; j <= startTimes.length; j++) {\n        var diff = new Date(startTimes[j]) - new Date(endTimes[j - 1]);\n\n        if (diff > maxDiff) {\n          hourDiff = new Date(startTimes[j]).getHours() - new Date(endTimes[j - 1]).getHours();\n          maxDiff = diff;\n          interval = j;\n        }\n      }\n\n      var hour = (interval === 0 ? 15 : new Date(endTimes[interval - 1]).getHours()) + (hourDiff % 2 === 0 ? hourDiff / 2 : (hourDiff + 1) / 2);\n      activityStartTime = new Date(startTime);\n      activityStartTime.setHours(hour - 7);\n      activityStartTime.setMinutes(0);\n      activityStartTime.setSeconds(0);\n      activityStartTime.setMilliseconds(0);\n      console.log(\"Looks Like we can book some active time on: \" + activityStartTime);\n      let acTime = document.getElementById(\"activityDuration\");\n      let minutes = acTime.options[acTime.selectedIndex].value;\n      activityEndTime = new Date(startTime);\n      activityEndTime.setHours(hour - 7);\n      activityEndTime.setMinutes(parseInt(minutes));\n      activityEndTime.setSeconds(0);\n      activityEndTime.setMilliseconds(0);\n      console.log(activityEndTime);\n      await createEvent();\n    } catch (error) {\n      console.log(\"Error in fetching calendar data: \" + error.message);\n    }\n  };\n\n  const createEvent = async () => {\n    try {\n      let addEventUrl = \"https://graph.microsoft.com/v1.0/me/events\";\n      const options = {\n        method: \"POST\",\n        body: JSON.stringify({\n          subject: \"Some Activity\",\n          start: {\n            dateTime: activityStartTime.toISOString(),\n            timeZone: \"Pacific Standard Time\"\n          },\n          end: {\n            dateTime: activityEndTime.toISOString(),\n            timeZone: \"Pacific Standard Time\"\n          },\n          responseRequested: true,\n          allowNewTimeProposals: true\n        }),\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Authorization\": await getAuthorizationToken()\n        }\n      };\n      var response = await fetch(addEventUrl, options);\n\n      if (response.status >= 300) {\n        throw new Error(response.statusText);\n      }\n\n      console.log(\"Event added. Please check your calendar!\");\n    } catch (error) {\n      console.log(\"Error in creating calendar event: \" + error.message);\n    }\n  };\n\n  const getAuthorizationToken = async () => {\n    // const authUrl = \"https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/oauth2/v2.0/authorize?client_id=5404d196-ed30-4a60-be91-03a30990f73b&response_type=code&redirect_uri=http%3A%2F%2Flocalhost&response_mode=query&scope=Calendars.ReadWrite&state=12345\";\n    // var res = await fetch(authUrl);\n    // console.log(res);\n    // var jsonResponse = await res.json();\n    // console.log(jsonResponse);\n    // var details = {\n    //   'client_id': \"5404d196-ed30-4a60-be91-03a30990f73b\",\n    //   'scope': \"Calendars.ReadWrite\",\n    //   'client_secret': \"\",\n    //   'grant_type': \"authorization_code\",\n    //   'redirect_uri': \"http://localhost\", \n    //   'code': \"\"\n    // };\n    // var formBody = [];\n    // for (var property in details) {\n    //   var encodedKey = encodeURIComponent(property);\n    //   var encodedValue = encodeURIComponent(details[property]);\n    //   formBody.push(encodedKey + \"=\" + encodedValue);\n    // }\n    // formBody = formBody.join(\"&\");\n    // const options = {\n    //   method: \"POST\",\n    //   body: formBody,\n    //   headers: {\n    //     \"Content-type\": \"application/x-www-form-urlencoded\"\n    //   }\n    // }\n    // var tokenEndPoint = \"https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/oauth2/v2.0/token\";\n    // var res = await fetch(tokenEndPoint, options);\n    // console.log(res);\n    // Paste Token from Graph Explorer Access Token tab until the generating auth token part above is complete\n    return \"\";\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"https://www.fitbit.com/oauth2/authorize?response_type=token&client_id=22BVTP&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2F&scope=activity%20heartrate%20location%20nutrition%20profile%20settings%20sleep%20social%20weight&expires_in=604800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }\n  }, \"Login to Fitbit\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    id: \"activity\",\n    onClick: getActivityData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }\n  }, \"Get Activity data\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    id: \"calendar\",\n    style: {\n      visibility: \"hidden\"\n    },\n    onClick: fetchData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }, \"Fetch My Calendar Data and Book Active Slots\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/taghos/source/experiments/MyActivity/myactivity/src/App.js"],"names":["React","Button","App","getActivityData","url","window","location","href","access_token","split","userId","getActivityDataUrl","options","headers","response","fetch","status","Error","statusText","data","json","steps","forEach","element","console","log","dateTime","value","error","message","activityStartTime","activityEndTime","fetchData","s","document","getElementById","startHour","parseInt","selectedIndex","e","endHour","startTime","endTime","startDateFull","Date","setDate","getDate","datePrefix","endDateFull","toISOString","substring","formatTimeOver24","formatTime","endDatePrefix","toString","getCalendarEventsUrl","getAuthorizationToken","body","events","startTimes","endTimes","i","isAllDay","start","end","sort","a","b","maxDiff","j","interval","hourDiff","length","diff","getHours","hour","setHours","setMinutes","setSeconds","setMilliseconds","acTime","minutes","createEvent","addEventUrl","method","JSON","stringify","subject","timeZone","responseRequested","allowNewTimeProposals","visibility"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const getActivityData = async () => {\r\n    try {\r\n      var url = window.location.href;\r\n      var access_token;\r\n      if (url !== \"http://localhost:3000/\") {\r\n        var access_token = url.split(\"#\")[1].split(\"=\")[1].split(\"&\")[0];\r\n        var userId = url.split(\"#\")[1].split(\"=\")[2].split(\"&\")[0]; \r\n\r\n        let getActivityDataUrl = 'https://api.fitbit.com/1/user/-/activities/steps/date/2020-07-20/today.json';\r\n\r\n        const options = {\r\n          headers: {\r\n            \"Authorization\":[\"Bearer \" + access_token]\r\n          }\r\n        };\r\n\r\n        var response = await fetch(getActivityDataUrl, options);\r\n\r\n        if(response.status >= 300) {\r\n          throw new Error(response.statusText);\r\n        }\r\n        var data = await response.json();\r\n        var steps = data['activities-steps']\r\n\r\n        steps.forEach(element => {\r\n          console.log(element.dateTime + \" : \" + element.value);\r\n        });\r\n\r\n        \r\n      }\r\n\r\n    } catch (error) {\r\n      console.log(\"Error in getting Activity data: \" + error.message);\r\n    }\r\n  }\r\n\r\n  let activityStartTime, activityEndTime;\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      let s = document.getElementById(\"startTime\");\r\n      let startHour = parseInt(s.options[s.selectedIndex].value)+7;  // Convert to UTC time\r\n      let e = document.getElementById(\"endTime\");\r\n      let endHour = parseInt(e.options[e.selectedIndex].value)+7;\r\n      var startTime, endTime;\r\n\r\n      if(startHour >= 24 && endHour>= 24) {\r\n        var startDateFull = new Date();\r\n        startDateFull.setDate(new Date().getDate() + 1);\r\n\r\n        var datePrefix = endDateFull.toISOString().substring(0, 11);\r\n        startTime = datePrefix + formatTimeOver24(startHour) + ':00:00.0000000';\r\n        endTime = datePrefix + formatTimeOver24(endHour) + ':00:00.0000000';\r\n      } else if(endHour >= 24) {\r\n        var datePrefix = new Date().toISOString().substring(0, 11);\r\n        startTime = datePrefix + formatTime(startHour) + ':00:00.0000000';\r\n\r\n        var endDateFull = new Date();\r\n        endDateFull.setDate(new Date().getDate() + 1);\r\n        var endDatePrefix = endDateFull.toISOString().substring(0, 11);\r\n        if(endHour-24<=9) {\r\n          endHour = \"0\" + (endHour-24).toString();\r\n        }\r\n        endTime = endDatePrefix + endHour + ':00:00.0000000';\r\n      } else {\r\n        var datePrefix = new Date().toISOString().substring(0, 11);\r\n        startTime = datePrefix + formatTime(startHour) + ':00:00.0000000';\r\n        endTime = datePrefix + formatTime(endHour) + ':00:00.0000000';\r\n      }\r\n\r\n      let getCalendarEventsUrl = \"https://graph.microsoft.com/v1.0/me/calendarView?startDateTime=\" + startTime + \"&endDateTime=\" + endTime + \"&$select=subject,start,end,isAllDay\";\r\n\r\n      const options = {\r\n        headers: {\r\n          \"Authorization\": await getAuthorizationToken()\r\n        }\r\n      };\r\n\r\n      // Fetching user's calendar data for today\r\n      var response = await fetch(getCalendarEventsUrl, options);\r\n      if(response.status >= 300) {\r\n        throw new Error(response.statusText);\r\n      }\r\n\r\n      var body = await response.json();\r\n      var events = body.value;\r\n\r\n      let startTimes = [];\r\n      let endTimes = [];\r\n      let i = 0;\r\n\r\n      console.log(\"Scanning your calendar\");\r\n\r\n      events.forEach(element => {\r\n        if(!element.isAllDay) {\r\n          startTimes[i] = new Date(element.start.dateTime);\r\n          endTimes[i] = new Date(element.end.dateTime);\r\n          // console.log(element.subject + \" : \" + startTimes[i] + \" to \" + endTimes[i]);\r\n          i++;\r\n        }\r\n      });\r\n\r\n      startTimes[i] = new Date(endTime);\r\n\r\n      startTimes.sort((a,b) => a-b);\r\n      endTimes.sort((a,b) => a-b);\r\n\r\n      let maxDiff = new Date(startTimes[0]) - new Date(startTime);\r\n\r\n      let j, interval = 0, hourDiff = 0;\r\n      for(j=1; j<=startTimes.length; j++) {\r\n        var diff = new Date(startTimes[j]) - new Date(endTimes[j-1]);\r\n        if(diff > maxDiff) {\r\n          hourDiff = new Date(startTimes[j]).getHours() - new Date(endTimes[j-1]).getHours();\r\n          maxDiff = diff;\r\n          interval = j;\r\n        }\r\n      }\r\n\r\n      var hour = (interval === 0 ? 15 : new Date(endTimes[interval-1]).getHours()) + ((hourDiff%2) === 0 ? hourDiff/2 : (hourDiff+1)/2);\r\n      \r\n      activityStartTime = new Date(startTime);\r\n      activityStartTime.setHours(hour-7);\r\n      activityStartTime.setMinutes(0);\r\n      activityStartTime.setSeconds(0);\r\n      activityStartTime.setMilliseconds(0);\r\n\r\n      console.log(\"Looks Like we can book some active time on: \" + activityStartTime);\r\n      \r\n      let acTime = document.getElementById(\"activityDuration\");\r\n      let minutes = acTime.options[acTime.selectedIndex].value;\r\n\r\n      activityEndTime = new Date(startTime);\r\n      activityEndTime.setHours(hour-7);\r\n      activityEndTime.setMinutes(parseInt(minutes));\r\n      activityEndTime.setSeconds(0);\r\n      activityEndTime.setMilliseconds(0);\r\n\r\n      console.log(activityEndTime);\r\n\r\n      await createEvent();\r\n    } catch (error) {\r\n      console.log(\"Error in fetching calendar data: \" + error.message);\r\n    }\r\n  }\r\n    \r\n  const createEvent = async () => {\r\n    try {\r\n      let addEventUrl = \"https://graph.microsoft.com/v1.0/me/events\";\r\n\r\n      const options = {\r\n        method: \"POST\",\r\n        body: JSON.stringify(\r\n          {  \r\n            subject: \"Some Activity\",\r\n            start: {\r\n              dateTime: activityStartTime.toISOString(),\r\n              timeZone: \"Pacific Standard Time\"\r\n            },\r\n            end: {\r\n              dateTime: activityEndTime.toISOString(),\r\n              timeZone: \"Pacific Standard Time\"\r\n            },\r\n            responseRequested: true,\r\n            allowNewTimeProposals: true\r\n          }\r\n        ),\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          \"Authorization\": await getAuthorizationToken()\r\n        }\r\n      };\r\n\r\n      var response = await fetch(addEventUrl, options);\r\n      if(response.status >= 300) {\r\n        throw new Error(response.statusText);\r\n      }\r\n      console.log(\"Event added. Please check your calendar!\");\r\n    } catch (error) {\r\n      console.log(\"Error in creating calendar event: \" + error.message);\r\n    }\r\n  }\r\n  \r\n  const getAuthorizationToken = async() => {\r\n    // const authUrl = \"https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/oauth2/v2.0/authorize?client_id=5404d196-ed30-4a60-be91-03a30990f73b&response_type=code&redirect_uri=http%3A%2F%2Flocalhost&response_mode=query&scope=Calendars.ReadWrite&state=12345\";\r\n    // var res = await fetch(authUrl);\r\n    // console.log(res);\r\n    // var jsonResponse = await res.json();\r\n    // console.log(jsonResponse);\r\n\r\n    // var details = {\r\n    //   'client_id': \"5404d196-ed30-4a60-be91-03a30990f73b\",\r\n    //   'scope': \"Calendars.ReadWrite\",\r\n    //   'client_secret': \"\",\r\n    //   'grant_type': \"authorization_code\",\r\n    //   'redirect_uri': \"http://localhost\", \r\n    //   'code': \"\"\r\n    // };\r\n    \r\n    // var formBody = [];\r\n    // for (var property in details) {\r\n    //   var encodedKey = encodeURIComponent(property);\r\n    //   var encodedValue = encodeURIComponent(details[property]);\r\n    //   formBody.push(encodedKey + \"=\" + encodedValue);\r\n    // }\r\n    // formBody = formBody.join(\"&\");\r\n\r\n    // const options = {\r\n    //   method: \"POST\",\r\n    //   body: formBody,\r\n    //   headers: {\r\n    //     \"Content-type\": \"application/x-www-form-urlencoded\"\r\n    //   }\r\n    // }\r\n\r\n    // var tokenEndPoint = \"https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/oauth2/v2.0/token\";\r\n    // var res = await fetch(tokenEndPoint, options);\r\n    // console.log(res);\r\n\r\n    // Paste Token from Graph Explorer Access Token tab until the generating auth token part above is complete\r\n    return \"\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p> */}\r\n        </header>\r\n        <div>\r\n          <br/>\r\n          <a href=\"https://www.fitbit.com/oauth2/authorize?response_type=token&client_id=22BVTP&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2F&scope=activity%20heartrate%20location%20nutrition%20profile%20settings%20sleep%20social%20weight&expires_in=604800\">\r\n            Login to Fitbit\r\n          </a>\r\n          <br/><br/>\r\n          <Button id=\"activity\" onClick={getActivityData}>\r\n            Get Activity data\r\n          </Button>\r\n          <br/><br/>\r\n          <Button id=\"calendar\" style={{visibility: \"hidden\"}} onClick={fetchData}>\r\n              Fetch My Calendar Data and Book Active Slots\r\n          </Button>\r\n          <br/>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}